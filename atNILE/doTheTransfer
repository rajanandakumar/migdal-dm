#!/usr/bin/python3
import os, sys, stat, time, shutil, subprocess

sys.path.append("..")
from db_interface import *
from configuration import *


def runTheCommand(command):
    runComm = subprocess.Popen(
        command,
        shell=True,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        close_fds=True,
    )
    return runComm.communicate()


di = mUtils()
lfn = sys.argv[1]  # "Logical file name"

status = miConf.checkVOMSProxy()
if status == -1:
    print("Alert - please renew proxy!")
if status == -2:
    print("Proxy too short for transfers ... aborting")
    sys.exit(-3)


mf = di.isFileInDB(lfn)  # Get the record from sqlite
cksum = mf.migChkSum
sFile = di.extractLocalPath(lfn, mf.migDisk)
dFile = miConf.dCachePath + lfn

print(f"Transferring {sFile} to PPD dCache ...{dFile}")

# Transfer to dCache
command = f"gfal-copy -v -f -p --checksum-mode both"
comm = f'{command} "{sFile}" "{dFile}"'
di.updateFileInDB(lfn, dCacheStatus="Ongoing")
theInfo = runTheCommand(comm)
transferError = 0
for aa in theInfo:
    if "ERROR" in str(aa) or "Error" in str(aa) or "error" in str(aa):
        transferError = 1
        print(f"Transfer error : {aa}")
        di.updateFileInDB(lfn, dCacheStatus="No")
        sys.exit(transferError)
print(f"File {lfn} successfully in dCache")

dCacheTime = datetime.datetime.fromtimestamp(time.time())
comm = f"gfal-xattr {dFile} xroot.cksum"
theInfo = runTheCommand(comm)
cksum = theInfo[0].decode().split()[1]
di.updateFileInDB(lfn, cksum=cksum, dCacheStatus="Yes", dCacheTime=dCacheTime)

try:
    print(f"Removing the file that has been transferred ... {sFile}")
    os.unlink(sFile)
    while sFile[1:] not in miConf.disks:
        # Go successively up the directory chain deleting if empty directory
        sFile = "/".join(sFile.split("/")[:-1])
        if os.path.isdir(sFile):
            if sFile[1:] in miConf.disks:
                # This directory is one of the configured directories
                aFiles = os.listdir(sFile)
                empty = True
                for aF in aFiles:
                    if aF.startswith("MIG_"):
                        empty = False
                if empty:
                    if empty:
                        magicFile = sFile + "/" + miConf.magicFinish
                        open(magicFile, "a").close()
                        os.chmod(magicFile, stat.S_IWUSR | stat.S_IWGRP | stat.S_IRUSR | stat.S_IRGRP)
                        shutil.chown(magicFile, user="nraja", group="midaq")
                        print("Wrote Magic finish file")
            elif len(os.listdir(sFile)) == 0:
                # Delete empty directory
                print(f"Deleting empty directory {sFile}")
                shutil.rmtree(sFile)
            else:
                break
except (IOError, PermissionError, FileNotFoundError) as e:
    print(e)
    print(f"No permission to delete the file / directory {sFile}")
